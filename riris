#!/usr/bin/python
# install python 3.7
# pip install irisnative-1.0.0-cp34.cp35.cp36.cp37-none-win_amd64.whl

# TODO: randomize filename and routines name (cod e sql)
# TODO: multiline sql support

import sys
import argparse
import shutil

def print_global(value, gname, subscripts):
        prn_str = gname
        if (subscripts != []):
            prn_str += "("
            for prn_sub in subscripts:
                prn_str += "\"" + prn_sub + "\", "
            prn_str = prn_str[:-2] + ") = "
        else:
            prn_str += " = "
        if (value == None):
            prn_str = prn_str[:-2]
            print(prn_str)
        else:
            print(prn_str + str(value))


def rec_print_global(iris_db, gname, subscripts, recursive = True):
    iter = iris_db.iterator(gname, *subscripts)
    for sub, gvalue in iter:
        print_global(gvalue, gname, subscripts + [sub])
        if (recursive):
            rec_print_global(iris_db, gname, subscripts + [sub], recursive)


formatter = lambda prog: argparse.HelpFormatter(prog,max_help_position=shutil.get_terminal_size().columns)

parser = argparse.ArgumentParser(prog="riris", description="Remote InterSystems IRIS command execution", epilog="Enjoy :)", add_help=False, formatter_class=formatter)

parser.add_argument("-H", "--help", help="Print this help", action="help")
parser.add_argument("-h", "--host", metavar="host", help="Destination host", default="127.0.0.1")
parser.add_argument("-s", "--port", metavar="port", help="Destination port", default="51773")
parser.add_argument("-n", "--namespace", metavar="namespace", help="Namespace", default="%SYS")
parser.add_argument("-u", "--user", metavar="user", help="IRIS username", default="superuser")
parser.add_argument("-p", "--password", metavar="password", help="IRIS password, if omitted it will be requested")
parser.add_argument("-v", "--verbose", help="Verbosity", action="store_true")

subparser = parser.add_subparsers(dest='command')

cls = subparser.add_parser('cls', epilog="Enjoy :)", add_help=False, formatter_class=formatter)
rtn = subparser.add_parser('rtn', epilog="Enjoy :)", add_help=False, formatter_class=formatter)
set = subparser.add_parser('set', epilog="Enjoy :)", add_help=False, formatter_class=formatter)
get = subparser.add_parser('get', epilog="Enjoy :)", add_help=False, formatter_class=formatter)
kil = subparser.add_parser('kil', epilog="Enjoy :)", add_help=False, formatter_class=formatter)
cod = subparser.add_parser('cod', epilog="Enjoy :)", add_help=False, formatter_class=formatter)
sql = subparser.add_parser('sql', epilog="Enjoy :)", add_help=False, formatter_class=formatter)

cls.add_argument("-H", "--help", help="Print this help", action="help")
cls.add_argument("cname", metavar="cname", help="Class to be called", nargs="?")
cls.add_argument("mname", metavar="method", help="Method to be called", nargs="?")
cls.add_argument("arguments", metavar="arguments", help="Method parameters", nargs="*")

rtn.add_argument("-H", "--help", help="Print this help", action="help")
rtn.add_argument("fname", metavar="fname", help="Funciton to be called", nargs="?")
rtn.add_argument("rname", metavar="rname", help="Routine to be called", nargs="?")
rtn.add_argument("arguments", metavar="arguments", help="Routine parameters", nargs="*")

get.add_argument("-H", "--help", help="Print this help", action="help")
get_ex = get.add_mutually_exclusive_group()
get_ex.add_argument("-r", "--recursive", help="If global has subscripts, just print print the node an all subscripts (zw)", action="store_true")
get_ex.add_argument("-j", "--just-value", help="just print the value", action="store_true")
get.add_argument("gname", metavar="gname", help="Global name", nargs="?")
get.add_argument("subscripts", metavar="subscripts", help="Global subscripts", nargs="*")

set.add_argument("-H", "--help", help="Print this help", action="help")
set.add_argument("value", metavar="value", help="Value", nargs="?")
set.add_argument("gname", metavar="gname", help="Global name", nargs="?")
set.add_argument("subscripts", metavar="subscripts", help="Global subscripts", nargs="*")

kil.add_argument("-H", "--help", help="Print this help", action="help")
kil.add_argument("gname", metavar="gname", help="Global name", nargs="?")
kil.add_argument("subscripts", metavar="subscripts", help="Global subscripts", nargs="*")

cod.add_argument("-H", "--help", help="Print this help", action="help")
cod.add_argument("-U", "--os-username", help="Remote OS username", required=True, nargs="?")
cod.add_argument("-P", "--os-password", help="Remote OS password", required=True, nargs="?")
cod.add_argument("-L", "--log", help="Log to file", action="store_true")
cod.add_argument("file", metavar="file", help="File with code to be executed", nargs="?")

sql.add_argument("-H", "--help", help="Print this help", action="help")
sql.add_argument("-U", "--os-username", help="Remote OS username", required=True, nargs="?")
sql.add_argument("-P", "--os-password", help="Remote OS password", required=True, nargs="?")
sql.add_argument("sql", metavar="sql", help="SQL query to be executed", nargs="*")

args = parser.parse_args()

if (args.password == None):
    import getpass
    args.password = getpass.getpass("Password:")

if (args.verbose):
    print(vars(args))

import irisnative
try:
    connection = irisnative.createConnection(args.host, int(args.port), args.namespace, args.user, args.password)
    dbnative = irisnative.createIris(connection)

    if (args.command == "cls"):
        # Executing a class method with arguments
        # test with:
        #   ./riris -h iris-server -p SYS cls %Library.Utility Date 5
        return_value = dbnative.classMethodValue(args.cname, args.mname, *args.arguments)
        print(return_value)
    elif (args.command == "rtn"):
        # Executing a routine with arguments
        # test with:
        #   ./riris -h iris-server -p SYS -n user rtn ^zcustomtst
        returnValue = dbnative.procedure(args.fname, args.rname, *args.arguments)
    elif (args.command == "get"):
        # Get a value
        # test with:
        #   ./riris -h iris-server -p SYS get ^pTest
        #   ./riris -h iris-server -p SYS get -r ^pTest
        #   ./riris -h iris-server -p SYS get -j ^pTest
        #   ./riris -h iris-server -p SYS get ^pTest("1")
        is_defined = dbnative.isDefined(args.gname, *args.subscripts)
        if (is_defined == 0):
            if (not args.just_value):
                print("*** Global not defined ***")
        else:
            return_value = dbnative.get(args.gname, *args.subscripts)
            if (args.recursive):
                    print_global(return_value, args.gname, args.subscripts)
                    rec_print_global(dbnative, args.gname, args.subscripts, True)
            else:
                if (args.just_value):
                    return_value = dbnative.get(args.gname, *args.subscripts)
                    print(return_value)
                else:
                    print_global(return_value, args.gname, args.subscripts)
                    rec_print_global(dbnative, args.gname, args.subscripts, False)
    elif (args.command == "set"):
        # Set a global
        # test with:
        #   ./riris -h iris-server -p SYS set 1 ^pTest
        #   ./riris -h iris-server -p SYS set 1 ^pTest ciao
        return_value = dbnative.set(args.value, args.gname, *args.subscripts)
    elif (args.command == "kil"):
        # Kill a global
        # test with:
        #   ./riris -h iris-server -p SYS kil ^pTest ciao
        #   ./riris -h iris-server -p SYS kil ^pTest
        return_value = dbnative.kill(args.gname, *args.subscripts)
    elif (args.command == "cod"):
        # Execute code inside a routine (if log option is enabled, then the output will be logged in a file and dispayed at the end of the routine)
        # test with:
        #   ./riris -h iris-server -p SYS cod -U root -P trakcare -L ./test_code
        # where test_code contains:
        #   k ^zdbg
        #   s ^zdbg="done with riris code!!!"
        #   w ^zdbg
        import os
        if (not os.path.exists(args.file)):
            raise Exception("File '" + args.file + "' does not exists")

        #converting the file as a routine
        xml_header=['<?xml version="1.0" encoding="UTF-8"?>\n', '<Export generator="IRIS" version="26" zv="IRIS for UNIX (Red Hat Enterprise Linux for x86-64) 2020.1 (Build 215_0_20146U)">\n', '<Routine name="zRIris" type="MAC" languagemode="0"><![CDATA[\n', 'zRIris\n']
        xml_footer=['end quit\n', ']]></Routine>\n', '</Export>']

        tmp_f = open("/tmp/zRIris.xml", "w")

        cod_f = open(args.file, "r")
        cod_lines = cod_f.readlines()
        cod_f.close()
        tmp_f.writelines(xml_header)
        if (args.log):
            tmp_f.writelines("    OPEN  \"/tmp/zRIris.log\":(\"WNS\"):1\n")
            tmp_f.writelines("    USE  \"/tmp/zRIris.log\"\n")
        else:
            tmp_f.writelines("    USE  \"/dev/null\"\n")
        for i in range(0, len(cod_lines)):
            tmp_f.writelines("    " + cod_lines[i])
        if (args.log):
            tmp_f.writelines("    CLOSE  \"/tmp/zRIris.log\"\n")
        tmp_f.writelines(xml_footer)
        tmp_f.close()

        import paramiko
        ssh = paramiko.SSHClient()
        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        ssh.connect(args.host, username=args.os_username, password=args.os_password)
        sftp = ssh.open_sftp()
        sftp.put("/tmp/zRIris.xml", "/tmp/zRIris.xml")
        sftp.close()
        ssh.close()

        dbnative.classMethodValue("%SYSTEM.OBJ", "Load", "/tmp/zRIris.xml", "fuck /displaylog=0 /displayerror=0")
        dbnative.procedure("zRIris", "zRIris")

        if (args.log):
            import paramiko
            ssh = paramiko.SSHClient()
            ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
            ssh.connect(args.host, username=args.os_username, password=args.os_password)
            sftp = ssh.open_sftp()
            sftp.get("/tmp/zRIris.log", "/tmp/zRIris.log")
            sftp.close()
            ssh.close()
            log_f = open("/tmp/zRIris.log", "r")
            for log_line in log_f:
                print(log_line)
            log_f.close()


    elif (args.command == "sql"):
        # Execute sql code
        # test with:
        #   ./riris -h iris-server -p SYS sql -U root -P trakcare ./test_sql
        #   ./riris -h iris-server -p SYS sql -U root -P trakcare select \* from Config.confg
        # where test_sql contains:
        #   select \* from Config.confg

        #converting the file as a routine
        xml_header=['<?xml version="1.0" encoding="UTF-8"?>\n', '<Export generator="IRIS" version="26" zv="IRIS for UNIX (Red Hat Enterprise Linux for x86-64) 2020.1 (Build 215_0_20146U)">\n', '<Routine name="zRIris" type="MAC" languagemode="0"><![CDATA[\n', 'zRIris\n']
        xml_footer=['end quit\n', ']]></Routine>\n', '</Export>']

        tmp_f = open("/tmp/zRIris.xml", "w")

        import os
        if (isinstance(args.sql, list)):
            sql_lines = []
            sql_lines.append(" ".join(args.sql))
        else:
            sql_f = open(args.file, "r")
            sql_lines = sql_f.readlines()
            sql_f.close()
        tmp_f.writelines(xml_header)
        tmp_f.writelines("    OPEN  \"/tmp/zRIris.log\":(\"WNS\"):1\n")
        tmp_f.writelines("    USE  \"/tmp/zRIris.log\"\n")
        for i in range(0, len(sql_lines)):
            tmp_f.writelines("    s result=$SYSTEM.SQL.Execute(\"" + sql_lines[i] + "\")\n")
            tmp_f.writelines("    zw result\n")

#            tmp_f.writelines("    set tSQL=1\n")
#            tmp_f.writelines("    set tSQL(1)=\"" + sql_lines[i] + "\"\n")
#            tmp_f.writelines("    set statement=##class(%SQL.Statement).%New()\n")
#            tmp_f.writelines("    set status=statement.%Prepare(.tSQL)\n")
#            tmp_f.writelines("    set resultset=statement.%Execute()\n")
#            tmp_f.writelines("    while resultset.%Next() {\n")
#            tmp_f.writelines("    set idx=0\n")
#            tmp_f.writelines("    while($get(resultset.GetData($i(idx)))'=\"\") {\n")
#            tmp_f.writelines("    write resultset.GetData(idx)_\", \"\n")
#            tmp_f.writelines("    }\n")
#            tmp_f.writelines("    write !\n")
#            tmp_f.writelines("    }\n")
        tmp_f.writelines("    CLOSE  \"/tmp/zRIris.log\"\n")
        tmp_f.writelines(xml_footer)
        tmp_f.close()

        import paramiko
        ssh = paramiko.SSHClient()
        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        ssh.connect(args.host, username=args.os_username, password=args.os_password)
        sftp = ssh.open_sftp()
        sftp.put("/tmp/zRIris.xml", "/tmp/zRIris.xml")
        sftp.close()
        ssh.close()

        dbnative.classMethodValue("%SYSTEM.OBJ", "Load", "/tmp/zRIris.xml", "fuck /displaylog=0 /displayerror=0")
        dbnative.procedure("zRIris", "zRIris")

        ssh = paramiko.SSHClient()
        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        ssh.connect(args.host, username=args.os_username, password=args.os_password)
        sftp = ssh.open_sftp()
        sftp.get("/tmp/zRIris.log", "/tmp/zRIris.log")
        sftp.close()
        ssh.close()
        log_f = open("/tmp/zRIris.log", "r")
        for log_line in log_f:
            print(log_line)
        log_f.close()

        pass

    connection.close()

except Exception as excp:
    raise excp
